{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://sathe-r-hw3/webpack/bootstrap","webpack://sathe-r-hw3/webpack/runtime/define property getters","webpack://sathe-r-hw3/webpack/runtime/hasOwnProperty shorthand","webpack://sathe-r-hw3/webpack/runtime/make namespace object","webpack://sathe-r-hw3/./src/utils.ts","webpack://sathe-r-hw3/./src/classes/phyllo.ts","webpack://sathe-r-hw3/./src/classes/shapes.ts","webpack://sathe-r-hw3/./src/visualizer.ts","webpack://sathe-r-hw3/./src/enums/audio-defaults.enum.ts","webpack://sathe-r-hw3/./src/audio.ts","webpack://sathe-r-hw3/./src/enums/main-defaults.enum.ts","webpack://sathe-r-hw3/./src/main.ts","webpack://sathe-r-hw3/./src/jsonLoader.ts","webpack://sathe-r-hw3/./src/loader.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { ColorStop } from './interfaces/colorStop.interface';\r\n\r\nconst makeColor = (red:number, green:number, blue:number, alpha = 1) => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n  };\r\n  \r\n  const getRandom = (min:number, max:number) => {\r\n    return Math.random() * (max - min) + min;\r\n  };\r\n  \r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor,255-floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\nconst getLinearGradient = (ctx: CanvasRenderingContext2D,startX:number,startY:number,endX:number,endY:number,colorStops:ColorStop[]) => {\r\n  let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n  for(let stop of colorStops){\r\n    lg.addColorStop(stop.percent,stop.color);\r\n  }\r\n  return lg;\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element) => {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  } else if (element.mozRequestFullscreen) {\r\n    element.mozRequestFullscreen();\r\n  } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n    element.mozRequestFullScreen();\r\n  } else if (element.webkitRequestFullscreen) {\r\n    element.webkitRequestFullscreen();\r\n  }\r\n  // .. and do nothing if the method is not supported\r\n};\r\n\r\nexport {makeColor, getRandomColor, getLinearGradient, goFullscreen};","export default class Phyllo{\r\n    ctx: CanvasRenderingContext2D;\r\n    x: number;\r\n    y: number;\r\n    maxX: number;\r\n    maxY: number;\r\n    divergence: number;\r\n    fps: number;\r\n    n: number;\r\n    c: number;\r\n    radius: number;\r\n    animationTimeout: any;\r\n\r\n    constructor(ctx: CanvasRenderingContext2D, x: number, y: number, maxX: number, maxY: number, divergence: number) {\r\n        this.ctx = ctx;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n        this.divergence = divergence;\r\n        this.fps = 60;\r\n        this.n = 0;\r\n        this.c = 4;\r\n        this.radius = 2;\r\n    }\r\n\r\n    update(audioData:Uint8Array) {\r\n        this.loop(audioData);\r\n    }\r\n\r\n    loop(audioData:Uint8Array) {\r\n        this.c += 0.01;\r\n        this.radius += 0.01;\r\n    \r\n        let a = this.n * this.dtr(this.divergence);\r\n        let r = this.c * Math.sqrt(this.n);\r\n    \r\n        let x = r * Math.cos(a) + this.x;\r\n        let y = r * Math.sin(a) + this.y;\r\n    \r\n        if (x >= this.maxX && y >= this.maxY) {\r\n            this.c = 4;\r\n            this.radius = 2;\r\n            this.n = 0;\r\n            this.ctx.clearRect(0, 0, this.maxX, this.maxY);\r\n        }\r\n    \r\n        let percent = audioData[this.n % audioData.length] / 255;\r\n        let circleRadius = percent * (this.maxY / 8); // Adjust the maximum radius as needed\r\n        let hue = (this.n / 5) % 360;\r\n        hue = (hue + 240) % 360; //make it more blue\r\n        let color = `hsl(${hue}, 100%, 50%)`;\r\n        this.drawCircle(x, y, circleRadius, color);\r\n    \r\n        this.n++;\r\n        \r\n        this.animationTimeout = setTimeout(() => this.loop(audioData), 1000 / this.fps);\r\n    }\r\n\r\n    dtr(degrees:number) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n    drawCircle(x:number, y:number, radius:number, color:string) {\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, radius, 0, Math.PI * 2);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    stopAnimation() {\r\n        clearTimeout(this.animationTimeout);\r\n    }\r\n}\r\n\r\n","export default class Shapes{\r\n\r\n    ctx: CanvasRenderingContext2D;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    fillStyle: string;\r\n    scale: number;\r\n    fps: number;\r\n\r\n    constructor(ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, fillStyle:string, scale: number){\r\n        this.ctx = ctx;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.fillStyle = fillStyle;\r\n        this.scale = scale;\r\n        this.fps = 60;\r\n    }\r\n\r\n    update() {\r\n        this.drawSquare();\r\n    }\r\n\r\n    drawSquare(){\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = this.fillStyle;\r\n        this.ctx.translate(this.x,this.y);\r\n        this.ctx.scale(this.scale, this.scale);\r\n        //now we'll draw from the center to get the rotation right\r\n        this.ctx.fillRect(0-this.width/2, 0-this.height/2, this.width,this.height);\r\n        //ctx.fillRect(0,0,width,height);\r\n        this.ctx.restore();\r\n\r\n        this.scale += 0.01;\r\n\r\n        setTimeout(() => this.drawSquare(), 1000 / this.fps);\r\n    }\r\n}\r\n\r\n","/*\r\n\tThe purpose of this file is to take in the analyser node and a <canvas> element: \r\n\t  - the module will create a drawing context that points at the <canvas> \r\n\t  - it will store the reference to the analyser node\r\n\t  - in draw(), it will loop through the data in the analyser node\r\n\t  - and then draw something representative on the canvas\r\n\t  - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\nimport * as utils from './utils';\r\nimport Phyllo  from './classes/phyllo';\r\nimport Shapes from './classes/shapes';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\n\r\n\r\nlet ctx: CanvasRenderingContext2D;\r\nlet canvasWidth: number;\r\nlet canvasHeight: number;\r\nlet gradient: CanvasGradient;\r\nlet analyserNode: AnalyserNode;\r\nlet audioData;\r\n\r\nlet scaleNum = 0;\r\n\r\n\r\nconst setupCanvas = (canvasElement: HTMLCanvasElement, analyserNodeRef: AnalyserNode) => {\r\n\t// create drawing context\r\n\tctx = canvasElement.getContext(\"2d\");\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\t// create a gradient that runs top to bottom\r\n\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"yellow\"},{percent:.25,color:\"orange\"},{percent:.5,color:\"coral\"},{percent:1,color:\"magenta\"}]);\r\n\t// keep a reference to the analyser node\r\n\tanalyserNode = analyserNodeRef;\r\n\t// this is the array where the analyser data will be stored\r\n\taudioData = new Uint8Array(analyserNode.fftSize/2);\r\n}\r\n\r\nconst draw = (params:DrawParams) => {\r\n  // 1 - populate the audioData array with the frequency data from the analyserNode\r\n\t// notice these arrays are passed \"by reference\" \r\n\t// OR\r\n\t//analyserNode.getByteTimeDomainData(audioData); // waveform data\r\n    if(params.toggleWave){\r\n        analyserNode.getByteTimeDomainData(audioData);\r\n    }\r\n    else{\r\n        analyserNode.getByteFrequencyData(audioData);\r\n    }\r\n\t\r\n\t// 2 - draw background\r\n\tctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = 0.3;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n\t\t\r\n\t// 3 - draw gradient\r\n\tif(params.showGradient){\r\n        //ctx.save();\r\n        ctx.fillStyle = gradient;\r\n        //ctx.globalAlpha = 0.3;\r\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n        //ctx.restore();\r\n\r\n\r\n    }\r\n    \r\n\r\n    if(params.showRays){\r\n        //ctx.fillStyle = \"rgba(0,0,0,.1)\";\r\n        if(params.showGradient){\r\n            ctx.fillStyle = gradient;\r\n            ctx.globalAlpha = 0.1;\r\n        }\r\n        else{\r\n            ctx.fillStyle = \"black\";\r\n            ctx.globalAlpha = 1;\r\n        }\r\n        \r\n        ctx.fillRect(0,0,ctx.canvas.width, ctx.canvas.height);\r\n          //ctx.fillStyle = \"red\";\r\n          ctx.save();\r\n          ctx.translate((ctx.canvas.width/2) - 8, (ctx.canvas.height/4.5) - 10);\r\n          for(let b of audioData){\r\n            let percent = b/255;\r\n            //if(percent < .02) percent = 0.02;\r\n            ctx.translate(20, 0);\r\n            ctx.rotate(Math.PI * 2/30)\r\n            ctx.save();\r\n            ctx.scale(1,-1);\r\n            ctx.fillStyle = utils.makeColor(0, 200, 150,1);\r\n            ctx.fillRect(0,0,10,100 * percent);\r\n            ctx.fillRect(0,0,10,100 * percent);\r\n            ctx.restore();\r\n            ctx.translate(5, 0);//add space between bars\r\n          }\r\n          ctx.restore();\r\n    }\r\n\r\n\t// 4 - draw bars\r\n\tif(params.showBars){\r\n        let barSpacing = 4;\r\n\r\n        let screenWidthForBars = canvasWidth - ((audioData.length - 30) * barSpacing);\r\n        let barWidth = screenWidthForBars / audioData.length;\r\n        let barHeight = 200;\r\n        let topSpacing = 4;\r\n\r\n        ctx.save();\r\n        ctx.fillStyle = `rgba(100,250,100,1)`;\r\n        ctx.strokeStyle = `rgba(100,250,100,1)`;\r\n\r\n        \r\n        //loop through the data and draw\r\n        for(let i = 0; i < audioData.length; i++){\r\n            ctx.fillRect(i * (barWidth + barSpacing), topSpacing + 256-audioData[i], barWidth,barHeight);\r\n            ctx.strokeRect(i * (barWidth + barSpacing), topSpacing + 256-audioData[i], barWidth,barHeight);\r\n        }\r\n        /*\r\n        for(let i = 0; i < audioData.length; i++){\r\n            ctx.fillRect(i * (barWidth + barSpacing), -(topSpacing + 256-audioData[i]), barWidth,barHeight);\r\n            ctx.strokeRect(i * (barWidth + barSpacing), -(topSpacing + 256-audioData[i]), barWidth,barHeight);\r\n        }\r\n        */\r\n        ctx.restore();\r\n    }\r\n\r\n    if (params.showLines) {\r\n        \r\n        //line\r\n        for (let i = 0; i < 10; i++) {\r\n            ctx.save();\r\n            ctx.strokeStyle = `rgba(255,255,0,1)`;\r\n            ctx.lineWidth = 3;\r\n            let x = -(ctx.canvas.width / audioData.length) ;\r\n            let y = (ctx.canvas.height / 2) + 50 + (i * 1.25) * 20; // Adjust y-coordinate\r\n            ctx.beginPath();\r\n            ctx.moveTo(x, y);\r\n            for (let b of audioData) {\r\n                ctx.lineTo(x, y - b);\r\n                x += (ctx.canvas.width / (audioData.length - 40));\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n            ctx.restore();\r\n        }\r\n    }\r\n\r\n\t// 5 - draw circles\r\n    if(params.showCircles){\r\n        let maxRadius = canvasHeight/4;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n        for(let i = 0; i < audioData.length; i++){\r\n            //blue-ish circles\r\n            let percent = audioData[i] / 255;\r\n\r\n            let circleRadius = percent * maxRadius;\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(0, 100, 200, .5 - percent/5.0);\r\n            ctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * 1.1, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            //teal-ish circles, bigger, more transparent\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(0, 200, 150, .5 - percent/5.0);\r\n            ctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * 1.25, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            //blue-ish circles, smaller\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(0, 100, 250, .5 - percent/5.0);\r\n            ctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * .70, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n            ctx.restore();\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    if(params.showPhyllo){\r\n        let phyllo1 = new Phyllo(ctx, ctx.canvas.width / audioData.length, canvasHeight/2, canvasWidth, canvasHeight, 137.5);\r\n        phyllo1.update(audioData);\r\n\r\n        let phyllo2 = new Phyllo(ctx, (ctx.canvas.width / audioData.length) + canvasWidth, canvasHeight/2, canvasWidth, canvasHeight, 137.5);\r\n        phyllo2.update(audioData);\r\n    }\r\n\r\n    if(params.showSquares){\r\n        if(params.showGradient){\r\n            ctx.fillStyle = gradient;\r\n            ctx.globalAlpha = 0.1;\r\n        }\r\n        else{\r\n            ctx.fillStyle = \"black\";\r\n            ctx.globalAlpha = 1;\r\n        }\r\n\r\n        let shape1 = new Shapes(ctx, 100, 100, 10000/ audioData.length, 10000/ audioData.length, \"yellow\", scaleNum);\r\n        shape1.update();\r\n        let shape2 = new Shapes(ctx, 600, 300, 10000/ audioData.length, 10000/ audioData.length, \"orange\", scaleNum);\r\n        shape2.update();\r\n    }\r\n\r\n    \r\n\r\n    if(params.showNoise){\r\n        // 6 - bitmap manipulation\r\n        // TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n        // regardless of whether or not we are applying a pixel effect\r\n        // At some point, refactor this code so that we are looping though the image data only if\r\n        // it is necessary\r\n\r\n        // A) grab all of the pixels on the canvas and put them in the `data` array\r\n        // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n        // the variable `data` below is a reference to that array \r\n        let imageData = ctx.getImageData(0,0,canvasWidth,canvasHeight);\r\n        let data = imageData.data;\r\n        let length = data.length;\r\n        let width = imageData.width;//not using here\r\n        // B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n        for(let i = 0; i < length; i += 4){\r\n            // C) randomly change every 20th pixel to red\r\n            if(params.showNoise && Math.random() < .05){\r\n                // data[i] is the red channel\r\n                // data[i+1] is the green channel\r\n                // data[i+2] is the blue channel\r\n                // data[i+3] is the alpha channel\r\n                data[i] = data[i+1] = data[i+2] = 255;//zero out the red and green and blue channels\r\n                //data[i] = 255;//make the red channel 100% red\r\n                // zero out the red and green and blue channels\r\n                // make the red channel 100% red\r\n            } // end if\r\n\r\n\r\n        } // end for\r\n        \r\n        // D) copy image data back to canvas\r\n        ctx.putImageData(imageData, 0, 0);\r\n    }\r\n\r\n    if(params.showInvert){\r\n        // A) grab all of the pixels on the canvas and put them in the `data` array\r\n        // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n        // the variable `data` below is a reference to that array \r\n        let imageData = ctx.getImageData(0,0,canvasWidth,canvasHeight);\r\n        let data = imageData.data;\r\n        let length = data.length;\r\n        let width = imageData.width;//not using here\r\n\r\n        for(let i = 0; i < length; i += 4){\r\n            let red = data[i], green = data[i+1], blue = data[i+2];\r\n        data[i] = 255 - red;\r\n        data[i+1] = 255 - green;\r\n        data[i+2] = 255 - blue;\r\n        }\r\n\r\n        // D) copy image data back to canvas\r\n        ctx.putImageData(imageData, 0, 0);\r\n    }\r\n\r\n    if(params.showEmboss){\r\n        // A) grab all of the pixels on the canvas and put them in the `data` array\r\n        // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n        // the variable `data` below is a reference to that array \r\n        let imageData = ctx.getImageData(0,0,canvasWidth,canvasHeight);\r\n        let data = imageData.data;\r\n        let length = data.length;\r\n        let width = imageData.width;//not using here\r\n\r\n        for(let i = 0; i < length; i++){\r\n            if(i%4 == 3) continue; //skip alpha channel\r\n            data[i] = 127 + 2*data[i] - data[i+4] - data [i + width*4];\r\n        }\r\n        ctx.putImageData(imageData, 0, 0);\r\n    }\r\n\t\t\r\n}\r\n\r\nexport {setupCanvas,draw};","enum DEFAULTS {\r\n    gain = .5,\r\n    numSamples = 256\r\n}\r\n\r\nexport { DEFAULTS };\r\n","import { DEFAULTS } from './enums/audio-defaults.enum';\r\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element:HTMLAudioElement;\r\nlet audioCtx: AudioContext;\r\nlet sourceNode: AudioNode;\r\nlet analyserNode: AnalyserNode;\r\nlet gainNode: GainNode;\r\nlet biquadFilter: BiquadFilterNode;\r\nlet lowshelfBiquadFilter: BiquadFilterNode;\r\n\r\n// 3 - here we are faking an enumeration\r\n\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst  setupWebaudio = filePath => {\r\n// 1 - The || is because WebAudio has not been standardized across browsers yet\r\nconst AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext(); \r\n\r\n// 2 - this creates an <audio> element\r\n    element = new Audio(); //document.querySelector(\"audio\")\r\n\r\n// 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n// 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n//treble node work\r\n    biquadFilter = audioCtx.createBiquadFilter();\r\n    biquadFilter.type = \"highshelf\";\r\n    //biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);//the bins that will get boosted\r\n    //biquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);//the amount that the bins will get boosted\r\n\r\n//bass node work\r\n    lowshelfBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowshelfBiquadFilter.type = \"lowshelf\"\r\n\r\n// 5 - create an analyser node\r\n// note the UK spelling of \"Analyser\"\r\n    analyserNode = audioCtx.createAnalyser();\r\n/*\r\n// 6\r\nWe will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\nacross the sound spectrum.\r\n\r\nIf DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\nthe third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\nthe amplitude of that frequency.\r\n*/ \r\n\r\n// fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n// 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n// 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(biquadFilter);\r\n    biquadFilter.connect(lowshelfBiquadFilter);\r\n    lowshelfBiquadFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\nconst loadSoundFile = (filePath:string) => {\r\n    element.src = filePath;\r\n}\r\n\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n}\r\n\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n}\r\n\r\nconst setVolume = (value:number) => {\r\n    value = Number(value);// make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n}\r\n\r\nexport {audioCtx,setupWebaudio,playCurrentSound,pauseCurrentSound,loadSoundFile,setVolume,analyserNode, biquadFilter, lowshelfBiquadFilter}","enum DEFAULTS {\r\n    sound1  =  \"media/softvibes.mp3\"\r\n}\r\n\r\nexport { DEFAULTS };","/*\r\n\tmain.js is primarily responsible for hooking up the UI to the rest of the application \r\n\tand setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as canvas from './visualizer';\r\nimport * as audio from './audio';\r\nimport * as utils from './utils';\r\nimport * as jsonLoader from './jsonLoader';\r\nimport { DEFAULTS } from './enums/main-defaults.enum';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nlet gradient_checkbox = document.querySelector(\"#cb-gradient\") as HTMLInputElement;\r\nlet bars_checkbox = document.querySelector(\"#cb-bars\") as HTMLInputElement;\r\nlet rays_checkbox = document.querySelector(\"#cb-rays\") as HTMLInputElement;\r\nlet lines_checkbox = document.querySelector(\"#cb-lines\") as HTMLInputElement;\r\nlet circles_checkbox = document.querySelector(\"#cb-circles\") as HTMLInputElement;\r\nlet phyllo_checkbox = document.querySelector(\"#cb-phyllo\") as HTMLInputElement;\r\nlet noise_checkbox = document.querySelector(\"#cb-noise\") as HTMLInputElement;\r\nlet invert_checkbox = document.querySelector(\"#cb-invert\") as HTMLInputElement;\r\nlet emboss_checkbox = document.querySelector(\"#cb-emboss\") as HTMLInputElement;\r\nlet treble_checkbox = document.querySelector(\"#cb-treble\") as HTMLInputElement;\r\nlet bass_checkbox = document.querySelector(\"#cb-bass\") as HTMLInputElement;\r\nlet sunset_select = document.querySelector(\"#sunset-select\") as HTMLInputElement;\r\nlet sunrise_select = document.querySelector(\"#sunrise-select\") as HTMLInputElement;\r\nlet night_select = document.querySelector(\"#night-select\") as HTMLInputElement;\r\nlet shape_checkbox = document.querySelector(\"#cb-shape\") as HTMLInputElement;\r\nlet visual_select = document.querySelector(\"#info-visualizer\") as HTMLInputElement;\r\n\r\nlet drawParams = {\r\n  showGradient  : true,\r\n  showBars      : true,\r\n  showRays      : true,\r\n  showLines     : false,\r\n  showCircles   : true,\r\n  showPhyllo    : true,\r\n  showSquares   : false,\r\n  showNoise     : false,\r\n  showInvert    : false,\r\n  showEmboss    : false,\r\n  playTreble    : false,\r\n  playBass      : false,\r\n  toggleWave    : false\r\n}\r\n\r\n\r\n\r\nlet highshelf = false;\r\nlet lowshelf = false;\r\n\r\nconst init = () => {\r\n\tconsole.log(\"init called\");\r\n\tconsole.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n    audio.setupWebaudio(DEFAULTS.sound1);\r\n    console.log(audio)\r\n    let canvasElement = document.querySelector(\"canvas\") as HTMLCanvasElement | null;\r\n\r\n    if (!canvasElement) {\r\n      console.error(\"Canvas element not found in the document.\");\r\n      return; // Exit the function if canvas element is not found\r\n  }\r\n\r\n  gradient_checkbox.checked = drawParams.showGradient;\r\n  bars_checkbox.checked = drawParams.showBars;\r\n  circles_checkbox.checked = drawParams.showCircles;\r\n  noise_checkbox.checked = drawParams.showNoise;\r\n  rays_checkbox.checked = drawParams.showRays;\r\n  lines_checkbox.checked = drawParams.showLines;\r\n  phyllo_checkbox.checked = drawParams.showPhyllo;\r\n  shape_checkbox.checked = drawParams.showSquares;\r\n\r\n  jsonLoader.load();\r\n\r\n\tsetupUI(canvasElement);\r\n  canvas.setupCanvas(canvasElement,audio.analyserNode);\r\n  loop();\r\n}\r\n\r\nconst toggleHighshelf = () => {\r\n  if(highshelf){\r\n    audio.biquadFilter.frequency.setValueAtTime(1000,audio.audioCtx.currentTime);\r\n    audio.biquadFilter.gain.setValueAtTime(25,audio.audioCtx.currentTime);\r\n  }\r\n  else{\r\n    audio.biquadFilter.gain.setValueAtTime(0,audio.audioCtx.currentTime);\r\n  }\r\n}\r\n\r\nconst toggleLowshelf = () => {\r\n  if(lowshelf){\r\n    audio.lowshelfBiquadFilter.frequency.setValueAtTime(1000,audio.audioCtx.currentTime);\r\n    audio.lowshelfBiquadFilter.gain.setValueAtTime(15,audio.audioCtx.currentTime);\r\n  }\r\n  else{\r\n    audio.lowshelfBiquadFilter.gain.setValueAtTime(0,audio.audioCtx.currentTime);\r\n  }\r\n}\r\n\r\nconst setupUI = (canvasElement) => {\r\n  // A - hookup fullscreen button\r\n  \r\n    // Your code here\r\n    const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n    const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n    playButton.innerText = \"Play\";\r\n\r\n    try{\r\n      fsButton.addEventListener('click', () => {\r\n        console.log(\"goFullscreen() called\");\r\n        utils.goFullscreen(canvasElement);\r\n      });\r\n    }\r\n    catch{\r\n      console.log(\"broken button\");\r\n    }\r\n \r\n  // B - Add .onclick event to play button\r\n  playButton.onclick = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n    // Check if context is in suspended state (autoplay policy)\r\n    if(audio.audioCtx.state == \"suspended\"){\r\n        audio.audioCtx.resume();\r\n    }\r\n    console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n    if(target.dataset.playing == \"no\"){\r\n        // If track is currently paused, play it\r\n        audio.playCurrentSound();\r\n        target.dataset.playing = \"yes\"; // Will change the CSS to correlate with current state\r\n        target.innerText = \"Pause\";\r\n    } else {\r\n        // If track is playing, pause it\r\n        audio.pauseCurrentSound();\r\n        target.dataset.playing = \"no\"; // Will change the CSS to correlate with current state\r\n        target.innerText = \"Play\";\r\n    }\r\n  }\r\n  //C - hookup volume slider & label\r\n  let volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n  let volumeLabel = document.querySelector(\"#label-volume\") as HTMLButtonElement;\r\n\r\n  //add .oninput event to slider\r\n  volumeSlider.oninput = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    // set the gain\r\n    audio.setVolume(parseFloat(target.value)); // Convert to number using parseFloat()\r\n    // update value of label to match value of slider\r\n    let num: any = Math.round((parseFloat(target.value) / 2 * 100)); // Convert to number\r\n    volumeLabel.innerHTML = num + \"\";\r\n};\r\n\r\n  //set value of label to match initial value of slider\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  //D - hookup track <select>\r\n  let trackSelect = document.querySelector(\"#select-track\") as HTMLInputElement;\r\n  //add .onchange event to <select>\r\n  trackSelect.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.loadSoundFile(target.value);\r\n    //pause the current track if it is playing\r\n    if(playButton.dataset.playing == \"yes\"){\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  }\r\n\r\n  sunset_select.addEventListener('change', function(){\r\n    if(this.checked){\r\n      drawParams.showGradient = true;\r\n      drawParams.showBars = false;\r\n      drawParams.showInvert = false;\r\n      drawParams.showRays = true;\r\n      drawParams.showCircles = true;\r\n      drawParams.showLines = true;\r\n    }\r\n});\r\n\r\nsunrise_select.addEventListener('change', function(){\r\n    if(this.checked){\r\n      drawParams.showGradient = true;\r\n      drawParams.showInvert = true;\r\n      drawParams.showBars = true;\r\n      drawParams.showRays = true;\r\n      drawParams.showCircles = true;\r\n      drawParams.showLines = false;\r\n    }\r\n});\r\n\r\nnight_select.addEventListener('change', function(){\r\n    if(this.checked){\r\n      drawParams.showGradient = false;\r\n      drawParams.showInvert = false;\r\n      drawParams.showBars = false;\r\n      drawParams.showRays = false;\r\n      drawParams.showCircles = true;\r\n      drawParams.showLines = true;\r\n    }\r\n});\r\n\r\n\r\n  treble_checkbox.checked = highshelf;\r\n  bass_checkbox.checked = lowshelf;\r\n\r\n  //checkbox event listeners\r\n  gradient_checkbox.addEventListener('change', function() {\r\n    drawParams.showGradient = this.checked;\r\n  });\r\n\r\n  bars_checkbox.addEventListener('change', function() {\r\n    drawParams.showBars = this.checked;\r\n  });\r\n\r\n  rays_checkbox.addEventListener('change', function(){\r\n    drawParams.showRays = this.checked;\r\n  })\r\n\r\n  lines_checkbox.addEventListener('change', function(){\r\n    drawParams.showLines = this.checked;\r\n  })\r\n\r\n  circles_checkbox.addEventListener('change', function() {\r\n      drawParams.showCircles = this.checked;\r\n  });\r\n\r\n  shape_checkbox.addEventListener('change', function() {\r\n    drawParams.showSquares = this.checked;\r\n  });\r\n\r\n  phyllo_checkbox.addEventListener('change', function() {\r\n    drawParams.showPhyllo = this.checked;\r\n});\r\n\r\n  noise_checkbox.addEventListener('change', function() {\r\n      drawParams.showNoise = this.checked;\r\n  });\r\n\r\n  invert_checkbox.addEventListener('change', function (){\r\n    drawParams.showInvert = this.checked;\r\n  });\r\n\r\n  emboss_checkbox.addEventListener('change', function() {\r\n    drawParams.showEmboss = this.checked;\r\n  });\r\n\r\n  treble_checkbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    highshelf = target.checked;\r\n    toggleHighshelf();\r\n  }\r\n\r\n  bass_checkbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    lowshelf = target.checked;\r\n    toggleLowshelf();\r\n  }\r\n\r\n  visual_select.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    if(target.value == \"frequency\"){\r\n      drawParams.toggleWave = false;\r\n    }\r\n    else{\r\n      drawParams.toggleWave = true;\r\n    }\r\n  }\r\n\r\n  toggleHighshelf();\r\n  toggleLowshelf();\r\n\r\n\t\r\n} // end setupUI\r\n\r\nconst loop = () => {\r\n  //makes it so that the program updates every frame\r\n    requestAnimationFrame(loop);\r\n    //function to call on the visualizer module in order to display the animations\r\n    canvas.draw(drawParams);\r\n  }\r\n\r\n\r\n\r\nexport {init};","const load = () => {\r\n    const url = \"data/av-data.json\";\r\n    const xhr = new XMLHttpRequest();\r\n    let target:XMLHttpRequest;\r\n    \r\n    xhr.onload = (e) => {\r\n        target = e.target as XMLHttpRequest;\r\n        let json;\r\n        // Try to parse the JSON response\r\n        try {\r\n            json = JSON.parse(target.responseText);\r\n        } catch(error) {\r\n            // Handle JSON parsing error\r\n            document.querySelector(\"#output\").innerHTML = \"BAD JSON\";\r\n            console.error('Error parsing JSON:', error);\r\n            return;\r\n        }\r\n\r\n        // Access the parsed JSON object\r\n        const obj = json;\r\n\r\n        // Build the HTML content\r\n        let html = \"\";\r\n        html += `<h2 class=\"title has-text-danger\">${obj.title ? obj.title : \"No title found\"}</h2>`;\r\n        html += `<p class=\"pt-4 subtitle has-text-danger\">Music Selection</p>`;\r\n        html += `<ol class=\"pl-6\">${obj.audioFiles.map(w => `<li>${w}</li>`).join(\"\")}</ol>`;\r\n        html += `<p class=\"pt-4\">${obj.instructions}</p>`;\r\n\r\n        // Display the HTML content in the output element\r\n        document.querySelector(\"#output\").innerHTML = html;\r\n    };\r\n\r\n    // Handle XHR error\r\n    xhr.onerror = e => console.log(`In onerror - HTTP Status Code = ${target.status}`);\r\n\r\n    // Open and send the XHR request\r\n    xhr.open(\"GET\", url);\r\n    xhr.send();\r\n};\r\n\r\nexport { load };\r\n","import * as main from \"./main\";\r\nwindow.onload = ()=>{\r\n\tconsole.log(\"window.onload called\");\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\t\r\n\t// 2 - start up app\r\n\tmain.init();\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","makeColor","red","green","blue","alpha","ctx","x","y","maxX","maxY","divergence","this","fps","n","c","radius","update","audioData","loop","a","dtr","r","Math","sqrt","cos","sin","clearRect","circleRadius","length","hue","color","drawCircle","animationTimeout","setTimeout","degrees","PI","save","fillStyle","beginPath","arc","closePath","fill","restore","stopAnimation","clearTimeout","width","height","scale","drawSquare","translate","fillRect","canvasWidth","canvasHeight","gradient","analyserNode","DEFAULTS","audioCtx","sourceNode","gainNode","biquadFilter","lowshelfBiquadFilter","setupWebaudio","filePath","AudioContext","window","Audio","loadSoundFile","createMediaElementSource","createBiquadFilter","type","createAnalyser","fftSize","numSamples","createGain","gain","connect","destination","src","playCurrentSound","play","pauseCurrentSound","pause","setVolume","Number","gradient_checkbox","document","querySelector","bars_checkbox","rays_checkbox","lines_checkbox","circles_checkbox","phyllo_checkbox","noise_checkbox","invert_checkbox","emboss_checkbox","treble_checkbox","bass_checkbox","sunset_select","sunrise_select","night_select","shape_checkbox","visual_select","drawParams","showGradient","showBars","showRays","showLines","showCircles","showPhyllo","showSquares","showNoise","showInvert","showEmboss","playTreble","playBass","toggleWave","highshelf","lowshelf","init","getByte","console","log","random","sound1","target","xhr","canvasElement","checked","XMLHttpRequest","onload","e","json","JSON","parse","responseText","error","innerHTML","html","title","audioFiles","map","w","join","instructions","onerror","status","open","send","setupUI","analyserNodeRef","getContext","startX","startY","endX","endY","colorStops","lg","createLinearGradient","percent","addColorStop","Uint8Array","toggleHighshelf","frequency","setValueAtTime","currentTime","toggleLowshelf","fsButton","playButton","innerText","addEventListener","element","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","onclick","state","resume","dataset","playing","volumeSlider","volumeLabel","oninput","parseFloat","num","round","dispatchEvent","Event","onchange","MouseEvent","requestAnimationFrame","params","getByteTimeDomainData","getByteFrequencyData","globalAlpha","canvas","b","rotate","barWidth","strokeStyle","i","topSpacing","strokeRect","lineWidth","moveTo","lineTo","stroke","maxRadius","data","imageData","getImageData","putImageData"],"sourceRoot":""}